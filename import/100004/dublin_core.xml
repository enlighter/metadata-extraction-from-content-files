<?xml version='1.0' encoding='UTF-8'?>
<dublin_core schema="dc">
  <dcvalue element="rights" language="en" qualifier="none">1990-2012, Python Software Foundation</dcvalue>
  <dcvalue element="contributor" language="en" qualifier="author">unknown</dcvalue>
  <dcvalue element="title" language="en" qualifier="none">Python v3.2.3 documentation</dcvalue>
  <dcvalue element="date" language="en" qualifier="none">2012-04-11</dcvalue>
  <dcvalue element="language" language="en" qualifier="none">en</dcvalue>
  <dcvalue element="description" language="en" qualifier="toc">Python Documentation contents -- What's New in Python -- What's New in Python -- What's New In Python 3.2 -- What's New In Python 3.2 -- PEP 384: Defining a Stable ABI -- PEP 389: Argparse Command Line Parsing Module -- PEP 391:  Dictionary Based Configuration for Logging -- PEP 3148:  The concurrent.futures module -- PEP 3147:  PYC Repository Directories -- PEP 3149: ABI Version Tagged .so Files -- PEP 3333: Python Web Server Gateway Interface v1.0.1 -- Other Language Changes -- New, Improved, and Deprecated Modules -- Multi-threading -- Optimizations -- Unicode -- Codecs -- Documentation -- IDLE -- Code Repository -- Build and C API Changes -- Porting to Python 3.2 -- What's New In Python 3.1 -- What's New In Python 3.1 -- PEP 372: Ordered Dictionaries -- PEP 378: Format Specifier for Thousands Separator -- Other Language Changes -- New, Improved, and Deprecated Modules -- Optimizations -- IDLE -- Build and C API Changes -- Porting to Python 3.1 -- What's New In Python 3.0 -- What's New In Python 3.0 -- Common Stumbling Blocks -- Overview Of Syntax Changes -- Changes Already Present In Python 2.6 -- Library Changes -- PEP 3101: A New Approach To String Formatting -- Changes To Exceptions -- Miscellaneous Other Changes -- Build and C API Changes -- Performance -- Porting To Python 3.0 -- What's New in Python 2.7 -- What's New in Python 2.7 -- The Future for Python 2.x -- Python 3.1 Features -- PEP 372: Adding an Ordered Dictionary to collections -- PEP 378: Format Specifier for Thousands Separator -- PEP 389: The argparse Module for Parsing Command Lines -- PEP 391: Dictionary-Based Configuration For Logging -- PEP 3106: Dictionary Views -- PEP 3137: The memoryview Object -- Other Language Changes -- New and Improved Modules -- Build and C API Changes -- Other Changes and Fixes -- Porting to Python 2.7 -- Acknowledgements -- What's New in Python 2.6 -- What's New in Python 2.6 -- Python 3.0 -- Changes to the Development Process -- PEP 343: The 'with' statement -- PEP 366: Explicit Relative Imports From a Main Module -- PEP 370: Per-user site-packages Directory -- PEP 371: The multiprocessing Package -- PEP 3101: Advanced String Formatting -- PEP 3105: print As a Function -- PEP 3110: Exception-Handling Changes -- PEP 3112: Byte Literals -- PEP 3116: New I/O Library -- PEP 3118: Revised Buffer Protocol -- PEP 3119: Abstract Base Classes -- PEP 3127: Integer Literal Support and Syntax -- PEP 3129: Class Decorators -- PEP 3141: A Type Hierarchy for Numbers -- Other Language Changes -- New and Improved Modules -- Deprecations and Removals -- Build and C API Changes -- Porting to Python 2.6 -- Acknowledgements -- What's New in Python 2.5 -- What's New in Python 2.5 -- PEP 308: Conditional Expressions -- PEP 309: Partial Function Application -- PEP 314: Metadata for Python Software Packages v1.1 -- PEP 328: Absolute and Relative Imports -- PEP 338: Executing Modules as Scripts -- PEP 341: Unified try/except/finally -- PEP 342: New Generator Features -- PEP 343: The 'with' statement -- PEP 352: Exceptions as New-Style Classes -- PEP 353: Using ssize_t as the index type -- PEP 357: The '__index__' method -- Other Language Changes -- New, Improved, and Removed Modules -- Build and C API Changes -- Porting to Python 2.5 -- Acknowledgements -- What's New in Python 2.4 -- What's New in Python 2.4 -- PEP 218: Built-In Set Objects -- PEP 237: Unifying Long Integers and Integers -- PEP 289: Generator Expressions -- PEP 292: Simpler String Substitutions -- PEP 318: Decorators for Functions and Methods -- PEP 322: Reverse Iteration -- PEP 324: New subprocess Module -- PEP 327: Decimal Data Type -- PEP 328: Multi-line Imports -- PEP 331: Locale-Independent Float/String Conversions -- Other Language Changes -- New, Improved, and Deprecated Modules -- Build and C API Changes -- Porting to Python 2.4 -- Acknowledgements -- What's New in Python 2.3 -- What's New in Python 2.3 -- PEP 218: A Standard Set Datatype -- PEP 255: Simple Generators -- PEP 263: Source Code Encodings -- PEP 273: Importing Modules from ZIP Archives -- PEP 277: Unicode file name support for Windows NT -- PEP 278: Universal Newline Support -- PEP 279: enumerate() -- PEP 282: The logging Package -- PEP 285: A Boolean Type -- PEP 293: Codec Error Handling Callbacks -- PEP 301: Package Index and Metadata for Distutils -- PEP 302: New Import Hooks -- PEP 305: Comma-separated Files -- PEP 307: Pickle Enhancements -- Extended Slices -- Other Language Changes -- New, Improved, and Deprecated Modules -- Pymalloc: A Specialized Object Allocator -- Build and C API Changes -- Other Changes and Fixes -- Porting to Python 2.3 -- Acknowledgements -- What's New in Python 2.2 -- What's New in Python 2.2 -- Introduction -- PEPs 252 and 253: Type and Class Changes -- PEP 234: Iterators -- PEP 255: Simple Generators -- PEP 237: Unifying Long Integers and Integers -- PEP 238: Changing the Division Operator -- Unicode Changes -- PEP 227: Nested Scopes -- New and Improved Modules -- Interpreter Changes and Fixes -- Other Changes and Fixes -- Acknowledgements -- What's New in Python 2.1 -- What's New in Python 2.1 -- Introduction -- PEP 227: Nested Scopes -- PEP 236: __future__ Directives -- PEP 207: Rich Comparisons -- PEP 230: Warning Framework -- PEP 229: New Build System -- PEP 205: Weak References -- PEP 232: Function Attributes -- PEP 235: Importing Modules on Case-Insensitive Platforms -- PEP 217: Interactive Display Hook -- PEP 208: New Coercion Model -- PEP 241: Metadata in Python Packages -- New and Improved Modules -- Other Changes and Fixes -- Acknowledgements -- What's New in Python 2.0 -- What's New in Python 2.0 -- Introduction -- What About Python 1.6? -- New Development Process -- Unicode -- List Comprehensions -- Augmented Assignment -- String Methods -- Garbage Collection of Cycles -- Other Core Changes -- Porting to 2.0 -- Extending/Embedding Changes -- Distutils: Making Modules Easy to Install -- XML Modules -- Module changes -- New modules -- IDLE Improvements -- Deleted and Deprecated Modules -- Acknowledgements -- The Python Tutorial -- The Python Tutorial -- Whetting Your Appetite -- Using the Python Interpreter -- Using the Python Interpreter -- Invoking the Interpreter -- The Interpreter and Its Environment -- An Informal Introduction to Python -- An Informal Introduction to Python -- Using Python as a Calculator -- First Steps Towards Programming -- More Control Flow Tools -- More Control Flow Tools -- if Statements -- for Statements -- The range() Function -- break and continue Statements, and else Clauses on Loops -- pass Statements -- Defining Functions -- More on Defining Functions -- Intermezzo: Coding Style -- Data Structures -- Data Structures -- More on Lists -- The del statement -- Tuples and Sequences -- Sets -- Dictionaries -- Looping Techniques -- More on Conditions -- Comparing Sequences and Other Types -- Modules -- Modules -- More on Modules -- Standard Modules -- The dir() Function -- Packages -- Input and Output -- Input and Output -- Fancier Output Formatting -- Reading and Writing Files -- Errors and Exceptions -- Errors and Exceptions -- Syntax Errors -- Exceptions -- Handling Exceptions -- Raising Exceptions -- User-defined Exceptions -- Defining Clean-up Actions -- Predefined Clean-up Actions -- Classes -- Classes -- A Word About Names and Objects -- Python Scopes and Namespaces -- A First Look at Classes -- Random Remarks -- Inheritance -- Private Variables -- Odds and Ends -- Exceptions Are Classes Too -- Iterators -- Generators -- Generator Expressions -- Brief Tour of the Standard Library -- Brief Tour of the Standard Library -- Operating System Interface -- File Wildcards -- Command Line Arguments -- Error Output Redirection and Program Termination -- String Pattern Matching -- Mathematics -- Internet Access -- Dates and Times -- Data Compression -- Performance Measurement -- Quality Control -- Batteries Included -- Brief Tour of the Standard Library – Part II -- Brief Tour of the Standard Library – Part II -- Output Formatting -- Templating -- Working with Binary Data Record Layouts -- Multi-threading -- Logging -- Weak References -- Tools for Working with Lists -- Decimal Floating Point Arithmetic -- What Now? -- Interactive Input Editing and History Substitution -- Interactive Input Editing and History Substitution -- Line Editing -- History Substitution -- Key Bindings -- Alternatives to the Interactive Interpreter -- Floating Point Arithmetic:  Issues and Limitations -- Floating Point Arithmetic:  Issues and Limitations -- Representation Error -- Python Setup and Usage -- Python Setup and Usage -- Command line and environment -- Command line and environment -- Command line -- Environment variables -- Using Python on Unix platforms -- Using Python on Unix platforms -- Getting and installing the latest version of Python -- Building Python -- Python-related paths and files -- Miscellaneous -- Editors -- Using Python on Windows -- Using Python on Windows -- Installing Python -- Alternative bundles -- Configuring Python -- Additional modules -- Compiling Python on Windows -- Other resources -- Using Python on a Macintosh -- Using Python on a Macintosh -- Getting and Installing MacPython -- The IDE -- Installing Additional Python Packages -- GUI Programming on the Mac -- Distributing Python Applications on the Mac -- Application Scripting -- Other Resources -- The Python Language Reference -- The Python Language Reference -- Introduction -- Introduction -- Alternate Implementations -- Notation -- Lexical analysis -- Lexical analysis -- Line structure -- Other tokens -- Identifiers and keywords -- Literals -- Operators -- Delimiters -- Data model -- Data model -- Objects, values and types -- The standard type hierarchy -- Special method names -- Execution model -- Execution model -- Naming and binding -- Exceptions -- Expressions -- Expressions -- Arithmetic conversions -- Atoms -- Primaries -- The power operator -- Unary arithmetic and bitwise operations -- Binary arithmetic operations -- Shifting operations -- Binary bitwise operations -- Comparisons -- Boolean operations -- Conditional expressions -- Lambdas -- Expression lists -- Evaluation order -- Summary -- Simple statements -- Simple statements -- Expression statements -- Assignment statements -- The assert statement -- The pass statement -- The del statement -- The return statement -- The yield statement -- The raise statement -- The break statement -- The continue statement -- The import statement -- The global statement -- The nonlocal statement -- Compound statements -- Compound statements -- The if statement -- The while statement -- The for statement -- The try statement -- The with statement -- Function definitions -- Class definitions -- Top-level components -- Top-level components -- Complete Python programs -- File input -- Interactive input -- Expression input -- Full Grammar specification -- The Python Standard Library -- The Python Standard Library -- Introduction -- Built-in Functions -- Built-in Constants -- Built-in Constants -- Constants added by the site module -- Built-in Types -- Built-in Types -- Truth Value Testing -- Boolean Operations — and, or, not -- Comparisons -- Numeric Types — int, float, complex -- Iterator Types -- Sequence Types — str, bytes, bytearray, list, tuple, range -- Set Types — set, frozenset -- Mapping Types — dict -- memoryview type -- Context Manager Types -- Other Built-in Types -- Special Attributes -- Built-in Exceptions -- Built-in Exceptions -- Exception hierarchy -- String Services -- String Services -- string — Common string operations -- re — Regular expression operations -- struct — Interpret bytes as packed binary data -- difflib — Helpers for computing deltas -- textwrap — Text wrapping and filling -- codecs — Codec registry and base classes -- unicodedata — Unicode Database -- stringprep — Internet String Preparation -- Data Types -- Data Types -- datetime — Basic date and time types -- calendar — General calendar-related functions -- collections — Container datatypes -- heapq — Heap queue algorithm -- bisect — Array bisection algorithm -- array — Efficient arrays of numeric values -- sched — Event scheduler -- queue — A synchronized queue class -- weakref — Weak references -- types — Names for built-in types -- copy — Shallow and deep copy operations -- pprint — Data pretty printer -- reprlib — Alternate repr() implementation -- Numeric and Mathematical Modules -- Numeric and Mathematical Modules -- numbers — Numeric abstract base classes -- math — Mathematical functions -- cmath — Mathematical functions for complex numbers -- decimal — Decimal fixed point and floating point arithmetic -- fractions — Rational numbers -- random — Generate pseudo-random numbers -- Functional Programming Modules -- Functional Programming Modules -- itertools — Functions creating iterators for efficient looping -- functools — Higher-order functions and operations on callable objects -- operator — Standard operators as functions -- Inplace Operators -- File and Directory Access -- File and Directory Access -- os.path — Common pathname manipulations -- fileinput — Iterate over lines from multiple input streams -- stat — Interpreting stat() results -- filecmp — File and Directory Comparisons -- tempfile — Generate temporary files and directories -- glob — Unix style pathname pattern expansion -- fnmatch — Unix filename pattern matching -- linecache — Random access to text lines -- shutil — High-level file operations -- macpath — Mac OS 9 path manipulation functions -- Data Persistence -- Data Persistence -- pickle — Python object serialization -- copyreg — Register pickle support functions -- shelve — Python object persistence -- marshal — Internal Python object serialization -- dbm — Interfaces to Unix “databases” -- sqlite3 — DB-API 2.0 interface for SQLite databases -- Data Compression and Archiving -- Data Compression and Archiving -- zlib — Compression compatible with gzip -- gzip — Support for gzip files -- bz2 — Compression compatible with bzip2 -- zipfile — Work with ZIP archives -- tarfile — Read and write tar archive files -- File Formats -- File Formats -- csv — CSV File Reading and Writing -- configparser — Configuration file parser -- netrc — netrc file processing -- xdrlib — Encode and decode XDR data -- plistlib — Generate and parse Mac OS X .plist files -- Cryptographic Services -- Cryptographic Services -- hashlib — Secure hashes and message digests -- hmac — Keyed-Hashing for Message Authentication -- Generic Operating System Services -- Generic Operating System Services -- os — Miscellaneous operating system interfaces -- io — Core tools for working with streams -- time — Time access and conversions -- argparse — Parser for command-line options, arguments and sub-commands -- optparse — Parser for command line options -- getopt — C-style parser for command line options -- logging — Logging facility for Python -- logging.config — Logging configuration -- logging.handlers — Logging handlers -- getpass — Portable password input -- curses — Terminal handling for character-cell displays -- curses.textpad — Text input widget for curses programs -- curses.ascii — Utilities for ASCII characters -- curses.panel — A panel stack extension for curses -- platform —  Access to underlying platform's identifying data -- errno — Standard errno system symbols -- ctypes — A foreign function library for Python -- Optional Operating System Services -- Optional Operating System Services -- select — Waiting for I/O completion -- threading — Thread-based parallelism -- multiprocessing — Process-based parallelism -- concurrent.futures — Launching parallel tasks -- mmap — Memory-mapped file support -- readline — GNU readline interface -- rlcompleter — Completion function for GNU readline -- dummy_threading — Drop-in replacement for the threading module -- _thread — Low-level threading API -- _dummy_thread — Drop-in replacement for the _thread module -- Interprocess Communication and Networking -- Interprocess Communication and Networking -- subprocess — Subprocess management -- socket — Low-level networking interface -- ssl — TLS/SSL wrapper for socket objects -- signal — Set handlers for asynchronous events -- asyncore — Asynchronous socket handler -- asynchat — Asynchronous socket command/response handler -- Internet Data Handling -- Internet Data Handling -- email — An email and MIME handling package -- json — JSON encoder and decoder -- mailcap — Mailcap file handling -- mailbox — Manipulate mailboxes in various formats -- mimetypes — Map filenames to MIME types -- base64 — RFC 3548: Base16, Base32, Base64 Data Encodings -- binhex — Encode and decode binhex4 files -- binascii — Convert between binary and ASCII -- quopri — Encode and decode MIME quoted-printable data -- uu — Encode and decode uuencode files -- Structured Markup Processing Tools -- Structured Markup Processing Tools -- html — HyperText Markup Language support -- html.parser — Simple HTML and XHTML parser -- html.entities — Definitions of HTML general entities -- xml.parsers.expat — Fast XML parsing using Expat -- xml.dom — The Document Object Model API -- xml.dom.minidom — Lightweight DOM implementation -- xml.dom.pulldom — Support for building partial DOM trees -- xml.sax — Support for SAX2 parsers -- xml.sax.handler — Base classes for SAX handlers -- xml.sax.saxutils — SAX Utilities -- xml.sax.xmlreader — Interface for XML parsers -- xml.etree.ElementTree — The ElementTree XML API -- Internet Protocols and Support -- Internet Protocols and Support -- webbrowser — Convenient Web-browser controller -- cgi — Common Gateway Interface support -- cgitb — Traceback manager for CGI scripts -- wsgiref — WSGI Utilities and Reference Implementation -- urllib.request — Extensible library for opening URLs -- urllib.response — Response classes used by urllib -- urllib.parse — Parse URLs into components -- urllib.error — Exception classes raised by urllib.request -- urllib.robotparser —  Parser for robots.txt -- http.client — HTTP protocol client -- ftplib — FTP protocol client -- poplib — POP3 protocol client -- imaplib — IMAP4 protocol client -- nntplib — NNTP protocol client -- smtplib — SMTP protocol client -- smtpd — SMTP Server -- telnetlib — Telnet client -- uuid — UUID objects according to RFC 4122 -- socketserver — A framework for network servers -- http.server — HTTP servers -- http.cookies — HTTP state management -- http.cookiejar — Cookie handling for HTTP clients -- xmlrpc.client — XML-RPC client access -- xmlrpc.server — Basic XML-RPC servers -- Multimedia Services -- Multimedia Services -- audioop — Manipulate raw audio data -- aifc — Read and write AIFF and AIFC files -- sunau — Read and write Sun AU files -- wave — Read and write WAV files -- chunk — Read IFF chunked data -- colorsys — Conversions between color systems -- imghdr — Determine the type of an image -- sndhdr — Determine type of sound file -- ossaudiodev — Access to OSS-compatible audio devices -- Internationalization -- Internationalization -- gettext — Multilingual internationalization services -- locale — Internationalization services -- Program Frameworks -- Program Frameworks -- turtle — Turtle graphics -- cmd — Support for line-oriented command interpreters -- shlex — Simple lexical analysis -- Graphical User Interfaces with Tk -- Graphical User Interfaces with Tk -- tkinter — Python interface to Tcl/Tk -- tkinter.ttk — Tk themed widgets -- tkinter.tix — Extension widgets for Tk -- tkinter.scrolledtext — Scrolled Text Widget -- IDLE -- Other Graphical User Interface Packages -- Development Tools -- Development Tools -- pydoc — Documentation generator and online help system -- doctest — Test interactive Python examples -- unittest — Unit testing framework -- 2to3 - Automated Python 2 to 3 code translation -- test — Regression tests package for Python -- test.support — Utilities for the Python test suite -- Debugging and Profiling -- Debugging and Profiling -- bdb — Debugger framework -- pdb — The Python Debugger -- The Python Profilers -- timeit — Measure execution time of small code snippets -- trace — Trace or track Python statement execution -- Python Runtime Services -- Python Runtime Services -- sys — System-specific parameters and functions -- sysconfig — Provide access to Python's configuration information -- builtins — Built-in objects -- __main__ — Top-level script environment -- warnings — Warning control -- contextlib — Utilities for with-statement contexts -- abc — Abstract Base Classes -- atexit — Exit handlers -- traceback — Print or retrieve a stack traceback -- __future__ — Future statement definitions -- gc — Garbage Collector interface -- inspect — Inspect live objects -- site — Site-specific configuration hook -- fpectl — Floating point exception control -- distutils — Building and installing Python modules -- Custom Python Interpreters -- Custom Python Interpreters -- code — Interpreter base classes -- codeop — Compile Python code -- Importing Modules -- Importing Modules -- imp — Access the import internals -- zipimport — Import modules from Zip archives -- pkgutil — Package extension utility -- modulefinder — Find modules used by a script -- runpy — Locating and executing Python modules -- importlib – An implementation of import -- Python Language Services -- Python Language Services -- parser — Access Python parse trees -- ast — Abstract Syntax Trees -- symtable — Access to the compiler's symbol tables -- symbol — Constants used with Python parse trees -- token — Constants used with Python parse trees -- keyword — Testing for Python keywords -- tokenize — Tokenizer for Python source -- tabnanny — Detection of ambiguous indentation -- pyclbr — Python class browser support -- py_compile — Compile Python source files -- compileall — Byte-compile Python libraries -- dis — Disassembler for Python bytecode -- pickletools — Tools for pickle developers -- Miscellaneous Services -- Miscellaneous Services -- formatter — Generic output formatting -- MS Windows Specific Services -- MS Windows Specific Services -- msilib — Read and write Microsoft Installer files -- msvcrt – Useful routines from the MS VC++ runtime -- winreg – Windows registry access -- winsound — Sound-playing interface for Windows -- Unix Specific Services -- Unix Specific Services -- posix — The most common POSIX system calls -- pwd — The password database -- spwd — The shadow password database -- grp — The group database -- crypt — Function to check Unix passwords -- termios — POSIX style tty control -- tty — Terminal control functions -- pty — Pseudo-terminal utilities -- fcntl — The fcntl() and ioctl() system calls -- pipes — Interface to shell pipelines -- resource — Resource usage information -- nis — Interface to Sun's NIS (Yellow Pages) -- syslog — Unix syslog library routines -- Undocumented Modules -- Undocumented Modules -- Platform specific modules -- Extending and Embedding the Python Interpreter -- Extending and Embedding the Python Interpreter -- Extending Python with C or C++ -- Extending Python with C or C++ -- A Simple Example -- Intermezzo: Errors and Exceptions -- Back to the Example -- The Module's Method Table and Initialization Function -- Compilation and Linkage -- Calling Python Functions from C -- Extracting Parameters in Extension Functions -- Keyword Parameters for Extension Functions -- Building Arbitrary Values -- Reference Counts -- Writing Extensions in C++ -- Providing a C API for an Extension Module -- Defining New Types -- Defining New Types -- The Basics -- Type Methods -- Building C and C++ Extensions with distutils -- Building C and C++ Extensions with distutils -- Distributing your extension modules -- Building C and C++ Extensions on Windows -- Building C and C++ Extensions on Windows -- A Cookbook Approach -- Differences Between Unix and Windows -- Using DLLs in Practice -- Embedding Python in Another Application -- Embedding Python in Another Application -- Very High Level Embedding -- Beyond Very High Level Embedding: An overview -- Pure Embedding -- Extending Embedded Python -- Embedding Python in C++ -- Compiling and Linking under Unix-like systems -- Python/C API Reference Manual -- Python/C API Reference Manual -- Introduction -- Introduction -- Include Files -- Objects, Types and Reference Counts -- Exceptions -- Embedding Python -- Debugging Builds -- The Very High Level Layer -- Reference Counting -- Exception Handling -- Exception Handling -- Exception Objects -- Unicode Exception Objects -- Recursion Control -- Standard Exceptions -- Utilities -- Utilities -- Operating System Utilities -- System Functions -- Process Control -- Importing Modules -- Data marshalling support -- Parsing arguments and building values -- String conversion and formatting -- Reflection -- Codec registry and support functions -- Abstract Objects Layer -- Abstract Objects Layer -- Object Protocol -- Number Protocol -- Sequence Protocol -- Mapping Protocol -- Iterator Protocol -- Buffer Protocol -- Old Buffer Protocol -- Concrete Objects Layer -- Concrete Objects Layer -- Fundamental Objects -- Numeric Objects -- Sequence Objects -- Mapping Objects -- Other Objects -- Initialization, Finalization, and Threads -- Initialization, Finalization, and Threads -- Initializing and finalizing the interpreter -- Process-wide parameters -- Thread State and the Global Interpreter Lock -- Sub-interpreter support -- Asynchronous Notifications -- Profiling and Tracing -- Advanced Debugger Support -- Memory Management -- Memory Management -- Overview -- Memory Interface -- Examples -- Object Implementation Support -- Object Implementation Support -- Allocating Objects on the Heap -- Common Object Structures -- Type Objects -- Number Object Structures -- Mapping Object Structures -- Sequence Object Structures -- Buffer Object Structures -- Supporting Cyclic Garbage Collection -- Distributing Python Modules -- Distributing Python Modules -- An Introduction to Distutils -- An Introduction to Distutils -- Concepts &amp; Terminology -- A Simple Example -- General Python terminology -- Distutils-specific terminology -- Writing the Setup Script -- Writing the Setup Script -- Listing whole packages -- Listing individual modules -- Describing extension modules -- Relationships between Distributions and Packages -- Installing Scripts -- Installing Package Data -- Installing Additional Files -- Additional meta-data -- Debugging the setup script -- Writing the Setup Configuration File -- Creating a Source Distribution -- Creating a Source Distribution -- Specifying the files to distribute -- Manifest-related options -- Creating Built Distributions -- Creating Built Distributions -- Creating RPM packages -- Creating Windows Installers -- Cross-compiling on Windows -- Vista User Access Control (UAC) -- Registering with the Package Index -- Registering with the Package Index -- The .pypirc file -- Uploading Packages to the Package Index -- Uploading Packages to the Package Index -- PyPI package display -- Examples -- Examples -- Pure Python distribution (by module) -- Pure Python distribution (by package) -- Single extension module -- Checking a package -- Extending Distutils -- Extending Distutils -- Integrating new commands -- Adding new distribution types -- Command Reference -- Command Reference -- Installing modules: the install command family -- Creating a source distribution: the sdist command -- API Reference -- API Reference -- distutils.core — Core Distutils functionality -- distutils.ccompiler — CCompiler base class -- distutils.unixccompiler — Unix C Compiler -- distutils.msvccompiler — Microsoft Compiler -- distutils.bcppcompiler — Borland Compiler -- distutils.cygwincompiler — Cygwin Compiler -- distutils.emxccompiler — OS/2 EMX Compiler -- distutils.archive_util —  Archiving utilities -- distutils.dep_util — Dependency checking -- distutils.dir_util — Directory tree operations -- distutils.file_util — Single file operations -- distutils.util — Miscellaneous other utility functions -- distutils.dist — The Distribution class -- distutils.extension — The Extension class -- distutils.debug — Distutils debug mode -- distutils.errors — Distutils exceptions -- distutils.fancy_getopt — Wrapper around the standard getopt module -- distutils.filelist — The FileList class -- distutils.log — Simple PEP 282-style logging -- distutils.spawn — Spawn a sub-process -- distutils.sysconfig — System configuration information -- distutils.text_file — The TextFile class -- distutils.version — Version number classes -- distutils.cmd — Abstract base class for Distutils commands -- Creating a new Distutils command -- distutils.command — Individual Distutils commands -- distutils.command.bdist — Build a binary installer -- distutils.command.bdist_packager — Abstract base class for packagers -- distutils.command.bdist_dumb — Build a “dumb” installer -- distutils.command.bdist_msi — Build a Microsoft Installer binary package -- distutils.command.bdist_rpm — Build a binary distribution as a Redhat RPM and SRPM -- distutils.command.bdist_wininst — Build a Windows installer -- distutils.command.sdist — Build a source distribution -- distutils.command.build — Build all files of a package -- distutils.command.build_clib — Build any C libraries in a package -- distutils.command.build_ext — Build any extensions in a package -- distutils.command.build_py — Build the .py/.pyc files of a package -- distutils.command.build_scripts — Build the scripts of a package -- distutils.command.clean — Clean a package build area -- distutils.command.config — Perform package configuration -- distutils.command.install — Install a package -- distutils.command.install_data — Install data files from a package -- distutils.command.install_headers — Install C/C++ header files from a package -- distutils.command.install_lib — Install library files from a package -- distutils.command.install_scripts — Install script files from a package -- distutils.command.register — Register a module with the Python Package Index -- distutils.command.check — Check the meta-data of a package -- Installing Python Modules -- Installing Python Modules -- Introduction -- Introduction -- Best case: trivial installation -- The new standard: Distutils -- Standard Build and Install -- Standard Build and Install -- Platform variations -- Splitting the job up -- How building works -- How installation works -- Alternate Installation -- Alternate Installation -- Alternate installation: the user scheme -- Alternate installation: the home scheme -- Alternate installation: Unix (the prefix scheme) -- Alternate installation: Windows (the prefix scheme) -- Custom Installation -- Custom Installation -- Modifying Python's Search Path -- Distutils Configuration Files -- Distutils Configuration Files -- Location and names of config files -- Syntax of config files -- Building Extensions: Tips and Tricks -- Building Extensions: Tips and Tricks -- Tweaking compiler/linker flags -- Using non-Microsoft compilers on Windows -- Python HOWTOs -- Python HOWTOs -- Python Advocacy HOWTO -- Python Advocacy HOWTO -- Reasons to Use Python -- Arguments and Rebuttals -- Useful Resources -- Porting Python 2 Code to Python 3 -- Porting Python 2 Code to Python 3 -- Choosing a Strategy -- Python 3 and 3to2 -- Python 2 and 2to3 -- Python 2/3 Compatible Source -- Other Resources -- Porting Extension Modules to 3.0 -- Porting Extension Modules to 3.0 -- Conditional compilation -- Changes to Object APIs -- Module initialization and state -- Other options -- Curses Programming with Python -- Curses Programming with Python -- What is curses? -- Starting and ending a curses application -- Windows and Pads -- Displaying Text -- User Input -- For More Information -- Descriptor HowTo Guide -- Descriptor HowTo Guide -- Abstract -- Definition and Introduction -- Descriptor Protocol -- Invoking Descriptors -- Descriptor Example -- Properties -- Functions and Methods -- Static Methods and Class Methods -- Functional Programming HOWTO -- Functional Programming HOWTO -- Introduction -- Iterators -- Generator expressions and list comprehensions -- Generators -- Built-in functions -- The itertools module -- The functools module -- Small functions and the lambda expression -- Revision History and Acknowledgements -- References -- Logging HOWTO -- Logging HOWTO -- Basic Logging Tutorial -- Advanced Logging Tutorial -- Logging Levels -- Useful Handlers -- Exceptions raised during logging -- Using arbitrary objects as messages -- Optimization -- Logging Cookbook -- Logging Cookbook -- Using logging in multiple modules -- Multiple handlers and formatters -- Logging to multiple destinations -- Configuration server example -- Dealing with handlers that block -- Sending and receiving logging events across a network -- Adding contextual information to your logging output -- Logging to a single file from multiple processes -- Using file rotation -- Subclassing QueueHandler - a ZeroMQ example -- Subclassing QueueListener - a ZeroMQ example -- An example dictionary-based configuration -- Regular Expression HOWTO -- Regular Expression HOWTO -- Introduction -- Simple Patterns -- Using Regular Expressions -- More Pattern Power -- Modifying Strings -- Common Problems -- Feedback -- Socket Programming HOWTO -- Socket Programming HOWTO -- Sockets -- Creating a Socket -- Using a Socket -- Disconnecting -- Non-blocking Sockets -- Sorting HOW TO -- Sorting HOW TO -- Sorting Basics -- Key Functions -- Operator Module Functions -- Ascending and Descending -- Sort Stability and Complex Sorts -- The Old Way Using Decorate-Sort-Undecorate -- The Old Way Using the cmp Parameter -- Odd and Ends -- Unicode HOWTO -- Unicode HOWTO -- Introduction to Unicode -- Python's Unicode Support -- Reading and Writing Unicode Data -- Acknowledgements -- HOWTO Fetch Internet Resources Using The urllib Package -- HOWTO Fetch Internet Resources Using The urllib Package -- Introduction -- Fetching URLs -- Handling Exceptions -- info and geturl -- Openers and Handlers -- Basic Authentication -- Proxies -- Sockets and Layers -- Footnotes -- HOWTO Use Python in the web -- HOWTO Use Python in the web -- The Low-Level View -- Step back: WSGI -- Model-View-Controller -- Ingredients for Websites -- Frameworks -- Python Frequently Asked Questions -- Python Frequently Asked Questions -- General Python FAQ -- General Python FAQ -- General Information -- Python in the real world -- Programming FAQ -- Programming FAQ -- General Questions -- Core Language -- Numbers and strings -- Performance -- Sequences (Tuples/Lists) -- Dictionaries -- Objects -- Modules -- Design and History FAQ -- Design and History FAQ -- Why does Python use indentation for grouping of statements? -- Why am I getting strange results with simple arithmetic operations? -- Why are floating point calculations so inaccurate? -- Why are Python strings immutable? -- Why must 'self' be used explicitly in method definitions and calls? -- Why can't I use an assignment in an expression? -- Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))? -- Why is join() a string method instead of a list or tuple method? -- How fast are exceptions? -- Why isn't there a switch or case statement in Python? -- Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation? -- Why can't lambda forms contain statements? -- Can Python be compiled to machine code, C or some other language? -- How does Python manage memory? -- Why doesn't CPython use a more traditional garbage collection scheme? -- Why isn't all memory freed when CPython exits? -- Why are there separate tuple and list data types? -- How are lists implemented? -- How are dictionaries implemented? -- Why must dictionary keys be immutable? -- Why doesn't list.sort() return the sorted list? -- How do you specify and enforce an interface spec in Python? -- Why are default values shared between objects? -- Why is there no goto? -- Why can't raw strings (r-strings) end with a backslash? -- Why doesn't Python have a “with” statement for attribute assignments? -- Why are colons required for the if/while/def/class statements? -- Why does Python allow commas at the end of lists and tuples? -- Library and Extension FAQ -- Library and Extension FAQ -- General Library Questions -- Common tasks -- Threads -- Input and Output -- Network/Internet Programming -- Databases -- Mathematics and Numerics -- Extending/Embedding FAQ -- Extending/Embedding FAQ -- Can I create my own functions in C? -- Can I create my own functions in C++? -- Writing C is hard; are there any alternatives? -- How can I execute arbitrary Python statements from C? -- How can I evaluate an arbitrary Python expression from C? -- How do I extract C values from a Python object? -- How do I use Py_BuildValue() to create a tuple of arbitrary length? -- How do I call an object's method from C? -- How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)? -- How do I access a module written in Python from C? -- How do I interface to C++ objects from Python? -- I added a module using the Setup file and the make fails; why? -- How do I debug an extension? -- I want to compile a Python module on my Linux system, but some files are missing. Why? -- What does “SystemError: _PyImport_FixupExtension: module yourmodule not loaded” mean? -- How do I tell “incomplete input” from “invalid input”? -- How do I find undefined g++ symbols __builtin_new or __pure_virtual? -- Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)? -- When importing module X, why do I get “undefined symbol: PyUnicodeUCS2*”? -- Python on Windows FAQ -- Python on Windows FAQ -- How do I run a Python program under Windows? -- How do I make Python scripts executable? -- Why does Python sometimes take so long to start? -- Where is Freeze for Windows? -- Is a *.pyd file the same as a DLL? -- How can I embed Python into a Windows application? -- How do I use Python for CGI? -- How do I keep editors from inserting tabs into my Python source? -- How do I check for a keypress without blocking? -- How do I emulate os.kill() in Windows? -- Why does os.path.isdir() fail on NT shared directories? -- cgi.py (or other CGI programming) doesn't work sometimes on NT or win95! -- Why doesn't os.popen() work in PythonWin on NT? -- Why doesn't os.popen()/win32pipe.popen() work on Win9x? -- PyRun_SimpleFile() crashes on Windows but not on Unix; why? -- Importing _tkinter fails on Windows 95/98: why? -- How do I extract the downloaded documentation on Windows? -- Missing cw3215mt.dll (or missing cw3215.dll) -- Warning about CTL3D32 version from installer -- Graphic User Interface FAQ -- Graphic User Interface FAQ -- General GUI Questions -- What platform-independent GUI toolkits exist for Python? -- What platform-specific GUI toolkits exist for Python? -- Tkinter questions -- “Why is Python Installed on my Computer?” FAQ -- “Why is Python Installed on my Computer?” FAQ -- What is Python? -- Why is Python installed on my machine? -- Can I delete Python? -- Glossary -- About these documents -- About these documents -- Contributors to the Python Documentation -- Reporting Bugs -- Reporting Bugs -- Documentation bugs -- Using the Python issue tracker -- Copyright -- History and License -- History and License -- History of the software -- Terms and conditions for accessing or otherwise using Python -- Licenses and Acknowledgements for Incorporated Software -- Licenses and Acknowledgements for Incorporated Software -- Mersenne Twister -- Sockets -- Floating point exception control -- Asynchronous socket services -- Cookie management -- Execution tracing -- UUencode and UUdecode functions -- XML Remote Procedure Calls -- test_epoll -- Select kqueue -- strtod and dtoa -- OpenSSL -- expat -- libffi -- zlib</dcvalue>
  <dcvalue element="publisher" language="en" qualifier="none">unknown</dcvalue>
</dublin_core>
